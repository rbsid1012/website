import { useEffect, useRef, useState } from 'react';
import { motion, type Variants } from 'framer-motion';
import { CheckCircle, Mail, User, Instagram } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

// ---------- Animation Variants (stable, no functions) ----------
const staggerParent: Variants = {
  hidden: {},
  show: {
    transition: { staggerChildren: 0.08, delayChildren: 0.05 },
  },
};

const fadeUp: Variants = {
  hidden: { opacity: 0, y: 24 },
  show: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.6, ease: 'easeOut' },
  },
};

const fadeIn: Variants = {
  hidden: { opacity: 0 },
  show: { opacity: 1, transition: { duration: 0.7 } },
};

// ---------- Tiny in-view counter (RAF, smooth) ----------
const Stat = ({ label, value }: { label: string; value: number }) => {
  const ref = useRef<HTMLDivElement | null>(null);
  const [count, setCount] = useState(0);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;

    let started = false;
    const io = new IntersectionObserver(
      ([entry]) => {
        if (!started && entry.isIntersecting) {
          started = true;
          const start = performance.now();
          const duration = 1000; // ms
          const step = (now: number) => {
            const p = Math.min((now - start) / duration, 1);
            setCount(Math.round(p * value));
            if (p < 1) requestAnimationFrame(step);
          };
          requestAnimationFrame(step);
        }
      },
      { rootMargin: '-20% 0px -20% 0px' }
    );
    io.observe(el);
    return () => io.disconnect();
  }, [value]);

  return (
    <div ref={ref} className="text-center px-6">
      <div className="text-4xl font-extrabold alpha-gradient-text">
        {count.toLocaleString()}
      </div>
      <div className="text-sm text-muted-foreground mt-1">{label}</div>
    </div>
  );
};

// ---------- Optional subtle particles (fixed positions to avoid SSR flicker) ----------
const PARTICLES = [
  { top: '12%', left: '18%', d: 7, delay: 0 },
  { top: '28%', left: '72%', d: 8, delay: 1.2 },
  { top: '46%', left: '10%', d: 6, delay: 0.6 },
  { top: '58%', left: '62%', d: 7.5, delay: 0.3 },
  { top: '74%', left: '30%', d: 9, delay: 1.0 },
  { top: '20%', left: '50%', d: 7.8, delay: 0.4 },
  { top: '84%', left: '80%', d: 8.5, delay: 1.4 },
];

const ParticlesBG = () => (
  <div className="absolute inset-0 overflow-hidden pointer-events-none">
    {PARTICLES.map((p, i) => (
      <motion.span
        key={i}
        className="absolute w-2 h-2 rounded-full bg-primary/30"
        style={{ top: p.top, left: p.left }}
        initial={{ y: 0, opacity: 0.5 }}
        animate={{ y: [-14, 0, -14], opacity: [0.4, 1, 0.4] }}
        transition={{ duration: p.d, delay: p.delay, repeat: Infinity, ease: 'easeInOut' }}
      />
    ))}
  </div>
);

export default function JoinTheFuture() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    instagram: '',
    useCase: '',
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setTimeout(() => {
      setIsSubmitted(true);
      setIsLoading(false);
      toast({
        title: 'Welcome to the future!',
        description: "You've been added to the ALPHA 1 waitlist. We'll be in touch soon.",
      });
    }, 1500);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) =>
    setFormData({ ...formData, [e.target.name]: e.target.value });

  // ---------- Submitted state ----------
  if (isSubmitted) {
    return (
      <div className="min-h-screen flex items-center justify-center relative">
        <ParticlesBG />
        <motion.div
          initial="hidden"
          animate="show"
          variants={fadeIn}
          className="text-center max-w-2xl mx-auto px-4"
        >
          <div className="w-24 h-24 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-8 alpha-pulse">
            <CheckCircle className="w-12 h-12 text-primary" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold mb-6 alpha-gradient-text">
            Welcome to the Future
          </h1>
          <p className="text-xl text-muted-foreground">
            You're now on the ALPHA 1 waitlist. We'll notify you as soon as early access becomes available.
          </p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-foreground">
      {/* ===== HERO â€” Split screen with stable stagger ===== */}
      <section className="relative h-[70vh] bg-black text-white flex items-center overflow-hidden">
        <ParticlesBG />
        <div className="container mx-auto px-4 grid md:grid-cols-2 gap-8 items-center">
          {/* Left: stacked headline */}
          <motion.div
            variants={staggerParent}
            initial="hidden"
            whileInView="show"
            viewport={{ once: true, amount: 0.2 }}
          >
            <motion.h1 className="leading-[0.9] font-extrabold">
              <motion.span className="block text-5xl md:text-6xl alpha-gradient-text" variants={fadeUp}>
                JOIN
              </motion.span>
              <motion.span className="block text-5xl md:text-6xl alpha-gradient-text" variants={fadeUp}>
                THE
              </motion.span>
              <motion.span className="block text-5xl md:text-6xl alpha-gradient-text" variants={fadeUp}>
                FUTURE
              </motion.span>
            </motion.h1>

            <motion.p
              className="mt-6 text-lg text-gray-300 max-w-md"
              variants={fadeUp}
            >
              Be among the first to experience the revolutionary ALPHA 1 smart bracelet.
            </motion.p>

            <motion.button
              variants={fadeUp}
              onClick={() =>
                document.getElementById('waitlist-form')?.scrollIntoView({ behavior: 'smooth' })
              }
              className="alpha-button mt-8"
            >
              Apply Now
            </motion.button>
          </motion.div>

          {/* Right: image (no heavy red tint) */}
          <motion.div
            variants={fadeIn}
            initial="hidden"
            whileInView="show"
            viewport={{ once: true, amount: 0.2 }}
            className="relative"
          >
            <div className="relative rounded-2xl overflow-hidden shadow-2xl ring-1 ring-white/10">
              <img
                src="/src/assets/team-working.jpg"
                alt="Team working"
                className="w-full h-[420px] md:h-[500px] object-cover transition-transform duration-700 hover:scale-[1.03]"
              />
            </div>
          </motion.div>
        </div>
      </section>

      {/* ===== SOCIAL PROOF ===== */}
      <section className="container mx-auto px-4 py-12">
        <div className="alpha-card flex flex-wrap items-center justify-center md:justify-between py-6">
          <Stat label="People waiting" value={2847} />
          <div className="hidden md:block w-px h-12 bg-border" />
          <Stat label="Days until launch" value={42} />
          <div className="hidden md:block w-px h-12 bg-border" />
          <Stat label="Early access spots" value={500} />
        </div>
      </section>

      {/* ===== BENEFITS (staggered children) ===== */}
      <section className="container mx-auto px-4 py-16">
        <motion.h2
          initial="hidden"
          whileInView="show"
          viewport={{ once: true, amount: 0.2 }}
          variants={fadeUp}
          className="text-3xl md:text-4xl font-bold text-center alpha-gradient-text"
        >
          Early Access Benefits
        </motion.h2>

        <motion.div
          className="mt-10 grid md:grid-cols-3 gap-6"
          variants={staggerParent}
          initial="hidden"
          whileInView="show"
          viewport={{ once: true, amount: 0.2 }}
        >
          {[
            'Priority shipping',
            'Exclusive pricing',
            'Beta testing access',
            'Direct founder access',
            'Feature input opportunities',
            'Limited edition design',
          ].map((benefit) => (
            <motion.div
              key={benefit}
              variants={fadeUp}
              className="alpha-card rounded-2xl p-6 backdrop-blur-sm border border-white/10 hover:border-white/20 hover:-translate-y-1 transition-all flex items-center space-x-3"
            >
              <CheckCircle className="w-5 h-5 text-primary flex-shrink-0" />
              <span>{benefit}</span>
            </motion.div>
          ))}
        </motion.div>
      </section>

      {/* ===== FORM ===== */}
      <section id="waitlist-form" className="container mx-auto px-4 pb-20">
        <motion.form
          onSubmit={handleSubmit}
          className="alpha-card max-w-2xl mx-auto space-y-6 p-8 rounded-3xl"
          variants={fadeUp}
          initial="hidden"
          whileInView="show"
          viewport={{ once: true, amount: 0.2 }}
        >
          <h2 className="text-2xl md:text-3xl font-bold text-center">Reserve Your Bracelet</h2>

          {/* Name */}
          <div className="space-y-2">
            <label htmlFor="name" className="block text-sm font-medium">
              Full Name *
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
              <input
                id="name"
                name="name"
                required
                value={formData.name}
                onChange={handleChange}
                className="alpha-input w-full pl-10"
                placeholder="Enter your full name"
              />
            </div>
          </div>

          {/* Email */}
          <div className="space-y-2">
            <label htmlFor="email" className="block text-sm font-medium">
              Email Address *
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
              <input
                id="email"
                type="email"
                name="email"
                required
                value={formData.email}
                onChange={handleChange}
                className="alpha-input w-full pl-10"
                placeholder="Enter your email"
              />
            </div>
          </div>

          {/* Instagram */}
          <div className="space-y-2">
            <label htmlFor="instagram" className="block text-sm font-medium">
              Instagram Handle
            </label>
            <div className="relative">
              <Instagram className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground" />
              <input
                id="instagram"
                name="instagram"
                value={formData.instagram}
                onChange={handleChange}
                className="alpha-input w-full pl-10"
                placeholder="@yourusername (optional)"
              />
            </div>
          </div>

          {/* Use Case */}
          <div className="space-y-2">
            <label htmlFor="useCase" className="block text-sm font-medium">
              How will you use ALPHA 1?
            </label>
            <textarea
              id="useCase"
              name="useCase"
              rows={4}
              value={formData.useCase}
              onChange={handleChange}
              className="alpha-input w-full resize-none"
              placeholder="Tell us about your intended use case - networking, events, payments, etc."
            />
          </div>

          <button
            type="submit"
            disabled={isLoading}
            className="alpha-button w-full text-lg py-4 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="w-5 h-5 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin"></div>
                <span>Joining the future...</span>
              </div>
            ) : (
              'Reserve Your Bracelet'
            )}
          </button>

          <div className="mt-2 pt-6 border-t border-border text-center">
            <p className="text-sm text-muted-foreground">
              By joining our waitlist, you agree to receive updates about ALPHA 1. We respect your privacy.
            </p>
          </div>
        </motion.form>
      </section>
    </div>
  );
}
